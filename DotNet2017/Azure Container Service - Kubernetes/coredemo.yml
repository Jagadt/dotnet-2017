---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: coremvc
  # namespace: my-project
  labels:
    run: coremvc
spec:
  replicas: 1
  selector:
    matchLabels:
      run: coremvc
  template:
    metadata:
      labels:
        run: coremvc
        app: coremvc
    spec:
      containers:
      - name: coremvc
        image: nileshgule/coremvc
        ports:
        - containerPort: 80
          protocol: TCP
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: corewebapi
  # namespace: my-project
  labels:
    run: corewebapi
spec:
  replicas: 1
  selector:
    matchLabels:
      run: corewebapi
  template:
    metadata:
      labels:
        run: corewebapi
    spec:
      initContainers:
        - name: init-myservice
          image: nileshgule/sqlclient
          command: ['sh', '-c', "/opt/mssql-tools/bin/sqlcmd -S mssql-deployment -U sa -P 'MyC0m9l&xP@ssw0rd' -d master -i initialize-database.sql"]
          # command: ['bash', '-c', "sqlcmd -S mssql-deployment -U sa -P 'MyC0m9l&xP@ssw0rd' -d master -i initialize-database.sql"]
          # command: ['sqlcmd', "-S mssql-deployment -U sa -P 'MyC0m9l&xP@ssw0rd' -d master -i /src/initialize-database.sql"]
          # command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
      containers:
      - name: corewebapi
        image: nileshgule/corewebapi
        ports:
        - containerPort: 8080
          protocol: TCP
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: coremvc
#   # namespace: my-project
#   labels:
#     run: coremvc
# spec:
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 80
#     nodePort: 31000
#   selector:
#     run: coremvc
#   type: NodePort
---
kind: Service
apiVersion: v1
metadata:
  name: corewebapi
  # namespace: my-project
  labels:
    run: corewebapi
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    nodePort: 31001
  selector:
    run: corewebapi
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: coremvc
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: coremvc

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: mssql-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sql2017
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: sql2017
        # image: nileshgule/sqldb
        image: microsoft/mssql-server-linux
        # command: ["/opt/mssql/bin/sqlservr"]
        ports:
        - name: dbport
          containerPort: 1433
        # livenessProbe:
        #   tcpSocket:
        #     port: dbport
        #   initialDelaySeconds: 20
        #   periodSeconds: 15
        # readinessProbe:
        #     tcpSocket:
        #       port: dbport
        #     initialDelaySeconds: 20
        #     periodSeconds: 15
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mssql
              key: SA_PASSWORD 
        - name: MSSQL_PID
          value: Developer
        volumeMounts:
        - name: mssqldb
          mountPath: /var/opt/mssql
      volumes:
      - name: mssqldb
        persistentVolumeClaim:
          claimName: mssql-data

---
apiVersion: v1
kind: Service
metadata:
  name: mssql-deployment
  # name: sql2017
spec:
  selector:
    app: sql2017
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer